{"version":3,"sources":["webpack:///./js/script1.js","webpack:///./js/script2.js","webpack:///./js/script3.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","updatedUsers","table","toggleUserState","allUsers","userName","reject","map","user","Object","assign","makeTransaction","transaction","min","max","Math","floor","random","setTimeout","id","logSuccess","_ref","logError","warn","amount","catch"],"mappings":"0HACMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,QAAQ,SAAAC,GACjBA,EAAQF,MAGNG,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,qCCTXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBP,EAAS,SAAAQ,GAAY,OAAIN,QAAQO,MAAMD,IAEvCE,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,QAAQ,SAACC,EAASc,GAC3Bd,EACEY,EAASG,IAAI,SAAAC,GAAI,OACfA,EAAKT,OAASM,EAAdI,OAAAC,OAAA,GAA8BF,EAA9B,CAAoCR,QAASQ,EAAKR,SAAWQ,QAMrEL,EAAgBL,EAAO,SAASD,KAAKJ,GACrCU,EAAgBL,EAAO,OAAOD,KAAKJ,GCpBnC,IAGMkB,EAAkB,SAAAC,GACtB,OAAO,IAAIrB,QAAQ,SAACC,EAASc,GAC3B,IAL+BO,EAAKC,EAK9BzB,GALyBwB,EAKS,IALJC,EAKS,IAJxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKlDK,WAAW,WACUH,KAAKE,SAAW,GAGjCzB,EAAQ,CAAE2B,GAAIP,EAAYO,GAAIzB,KAAML,IAEpCiB,EAAOM,EAAYO,KAEpB9B,MAID+B,EAAa,SAAAC,GAAkB,IAAfF,EAAeE,EAAfF,GAAIzB,EAAW2B,EAAX3B,KACxBC,QAAQC,IAAR,eAA2BuB,EAA3B,iBAA8CzB,EAA9C,OAGI4B,EAAW,SAAAH,GACfxB,QAAQ4B,KAAR,gCAA6CJ,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/B3B,KAAKuB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/B3B,KAAKuB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAC/B3B,KAAKuB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/B3B,KAAKuB,GACLK,MAAMH","file":"main.2eed31f7c72762fd9e4e.js","sourcesContent":["\"use strict\";\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    resolve(ms);\r\n  });\r\n};\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","\"use strict\";\r\nconst users = [\r\n  { name: \"Mango\", active: true },\r\n  { name: \"Poly\", active: false },\r\n  { name: \"Ajax\", active: true },\r\n  { name: \"Lux\", active: false }\r\n];\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n    resolve(\r\n      allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user\r\n      )\r\n    );\r\n  });\r\n};\r\n\r\ntoggleUserState(users, \"Mango\").then(logger);\r\ntoggleUserState(users, \"Lux\").then(logger);","\"use strict\";\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}